
//! Autogenerated weights for `pallet_game`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `LAPTOP-DFFNONK6`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_game
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/game/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions needed for pallet_game.
pub trait WeightInfo {
	fn setup_game() -> Weight;
	fn register_user() -> Weight;
	fn give_points() -> Weight;
	fn play_game() -> Weight;
	fn submit_answer() -> Weight;
	fn list_nft() -> Weight;
	fn delist_nft() -> Weight;
	fn make_offer() -> Weight;
	fn handle_offer() -> Weight;
	fn add_property() -> Weight;
	fn remove_property() -> Weight;
	fn add_to_admins() -> Weight;
	fn remove_from_admins() -> Weight;
	fn request_token() -> Weight;
}

/// Weight functions for `pallet_game`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Nfts::NextCollectionId` (r:1 w:1)
	/// Proof: `Nfts::NextCollectionId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Collection` (r:8 w:8)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::TestProperties` (r:1 w:1)
	/// Proof: `GameModule::TestProperties` (`max_values`: Some(1), `max_size`: Some(3002402), added: 3002897, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::CurrentRound` (r:1 w:1)
	/// Proof: `GameModule::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::RoundActive` (r:0 w:1)
	/// Proof: `GameModule::RoundActive` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::CollectionColor` (r:0 w:8)
	/// Proof: `GameModule::CollectionColor` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::TestPrices` (r:0 w:3)
	/// Proof: `GameModule::TestPrices` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionRoleOf` (r:0 w:8)
	/// Proof: `Nfts::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:0 w:8)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionAccount` (r:0 w:8)
	/// Proof: `Nfts::CollectionAccount` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn setup_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `166`
		//  Estimated: `3003887`
		// Minimum execution time: 217_169_000 picoseconds.
		Weight::from_parts(248_356_000, 0)
			.saturating_add(Weight::from_parts(0, 3003887))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(48))
	}
	/// Storage: `GameModule::Admins` (r:1 w:0)
	/// Proof: `GameModule::Admins` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::Users` (r:1 w:1)
	/// Proof: `GameModule::Users` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn register_user() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `3593`
		// Minimum execution time: 19_511_000 picoseconds.
		Weight::from_parts(21_802_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `GameModule::Users` (r:1 w:1)
	/// Proof: `GameModule::Users` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	fn give_points() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `290`
		//  Estimated: `3566`
		// Minimum execution time: 13_864_000 picoseconds.
		Weight::from_parts(20_611_000, 0)
			.saturating_add(Weight::from_parts(0, 3566))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `GameModule::Users` (r:1 w:0)
	/// Proof: `GameModule::Users` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::RoundActive` (r:1 w:0)
	/// Proof: `GameModule::RoundActive` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::CurrentRound` (r:1 w:0)
	/// Proof: `GameModule::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::GameId` (r:1 w:1)
	/// Proof: `GameModule::GameId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::GamesExpiring` (r:1 w:1)
	/// Proof: `GameModule::GamesExpiring` (`max_values`: None, `max_size`: Some(822), added: 3297, mode: `MaxEncodedLen`)
	/// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::TestProperties` (r:1 w:0)
	/// Proof: `GameModule::TestProperties` (`max_values`: Some(1), `max_size`: Some(3002402), added: 3002897, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::GameInfo` (r:0 w:1)
	/// Proof: `GameModule::GameInfo` (`max_values`: None, `max_size`: Some(30077), added: 32552, mode: `MaxEncodedLen`)
	fn play_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1966`
		//  Estimated: `3003887`
		// Minimum execution time: 41_464_000 picoseconds.
		Weight::from_parts(46_440_000, 0)
			.saturating_add(Weight::from_parts(0, 3003887))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `GameModule::GameInfo` (r:1 w:1)
	/// Proof: `GameModule::GameInfo` (`max_values`: None, `max_size`: Some(30077), added: 32552, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::TestPrices` (r:1 w:0)
	/// Proof: `GameModule::TestPrices` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::Users` (r:1 w:1)
	/// Proof: `GameModule::Users` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::Leaderboard` (r:1 w:1)
	/// Proof: `GameModule::Leaderboard` (`max_values`: Some(1), `max_size`: Some(361), added: 856, mode: `MaxEncodedLen`)
	fn submit_answer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1014`
		//  Estimated: `33542`
		// Minimum execution time: 34_340_000 picoseconds.
		Weight::from_parts(36_929_000, 0)
			.saturating_add(Weight::from_parts(0, 33542))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Nfts::Item` (r:1 w:1)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nfts::ItemConfigOf` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Collection` (r:1 w:0)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Attribute` (r:1 w:0)
	/// Proof: `Nfts::Attribute` (`max_values`: None, `max_size`: Some(446), added: 2921, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::NextListingId` (r:1 w:1)
	/// Proof: `GameModule::NextListingId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::Listings` (r:0 w:1)
	/// Proof: `GameModule::Listings` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Account` (r:0 w:2)
	/// Proof: `Nfts::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemPriceOf` (r:0 w:1)
	/// Proof: `Nfts::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::PendingSwapOf` (r:0 w:1)
	/// Proof: `Nfts::PendingSwapOf` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	fn list_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1379`
		//  Estimated: `4326`
		// Minimum execution time: 80_220_000 picoseconds.
		Weight::from_parts(88_509_000, 0)
			.saturating_add(Weight::from_parts(0, 4326))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `GameModule::Listings` (r:1 w:1)
	/// Proof: `GameModule::Listings` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Collection` (r:1 w:0)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Attribute` (r:1 w:0)
	/// Proof: `Nfts::Attribute` (`max_values`: None, `max_size`: Some(446), added: 2921, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nfts::ItemConfigOf` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Item` (r:1 w:1)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Account` (r:0 w:2)
	/// Proof: `Nfts::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemPriceOf` (r:0 w:1)
	/// Proof: `Nfts::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::PendingSwapOf` (r:0 w:1)
	/// Proof: `Nfts::PendingSwapOf` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	fn delist_nft() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1476`
		//  Estimated: `4326`
		// Minimum execution time: 73_031_000 picoseconds.
		Weight::from_parts(80_820_000, 0)
			.saturating_add(Weight::from_parts(0, 4326))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `GameModule::Listings` (r:1 w:0)
	/// Proof: `GameModule::Listings` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemConfigOf` (r:1 w:1)
	/// Proof: `Nfts::ItemConfigOf` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Collection` (r:1 w:0)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Attribute` (r:1 w:0)
	/// Proof: `Nfts::Attribute` (`max_values`: None, `max_size`: Some(446), added: 2921, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Item` (r:1 w:1)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::NextOfferId` (r:1 w:1)
	/// Proof: `GameModule::NextOfferId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::Offers` (r:0 w:1)
	/// Proof: `GameModule::Offers` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Account` (r:0 w:2)
	/// Proof: `Nfts::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemPriceOf` (r:0 w:1)
	/// Proof: `Nfts::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::PendingSwapOf` (r:0 w:1)
	/// Proof: `Nfts::PendingSwapOf` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	fn make_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1550`
		//  Estimated: `4326`
		// Minimum execution time: 80_820_000 picoseconds.
		Weight::from_parts(88_066_000, 0)
			.saturating_add(Weight::from_parts(0, 4326))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: `GameModule::Offers` (r:1 w:1)
	/// Proof: `GameModule::Offers` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::Listings` (r:1 w:1)
	/// Proof: `GameModule::Listings` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Collection` (r:1 w:0)
	/// Proof: `Nfts::Collection` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Attribute` (r:2 w:0)
	/// Proof: `Nfts::Attribute` (`max_values`: None, `max_size`: Some(446), added: 2921, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionConfigOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionConfigOf` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemConfigOf` (r:2 w:2)
	/// Proof: `Nfts::ItemConfigOf` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Item` (r:2 w:2)
	/// Proof: `Nfts::Item` (`max_values`: None, `max_size`: Some(861), added: 3336, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::CollectionRoleOf` (r:1 w:0)
	/// Proof: `Nfts::CollectionRoleOf` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::Users` (r:2 w:2)
	/// Proof: `GameModule::Users` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::CollectionColor` (r:1 w:0)
	/// Proof: `GameModule::CollectionColor` (`max_values`: None, `max_size`: Some(21), added: 2496, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::Leaderboard` (r:1 w:1)
	/// Proof: `GameModule::Leaderboard` (`max_values`: Some(1), `max_size`: Some(361), added: 856, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::Account` (r:0 w:4)
	/// Proof: `Nfts::Account` (`max_values`: None, `max_size`: Some(88), added: 2563, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::ItemPriceOf` (r:0 w:2)
	/// Proof: `Nfts::ItemPriceOf` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	/// Storage: `Nfts::PendingSwapOf` (r:0 w:2)
	/// Proof: `Nfts::PendingSwapOf` (`max_values`: None, `max_size`: Some(71), added: 2546, mode: `MaxEncodedLen`)
	fn handle_offer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2178`
		//  Estimated: `7662`
		// Minimum execution time: 154_210_000 picoseconds.
		Weight::from_parts(166_048_000, 0)
			.saturating_add(Weight::from_parts(0, 7662))
			.saturating_add(T::DbWeight::get().reads(15))
			.saturating_add(T::DbWeight::get().writes(17))
	}
	/// Storage: `GameModule::TestProperties` (r:1 w:1)
	/// Proof: `GameModule::TestProperties` (`max_values`: Some(1), `max_size`: Some(3002402), added: 3002897, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::TestPrices` (r:0 w:1)
	/// Proof: `GameModule::TestPrices` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn add_property() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1670`
		//  Estimated: `3003887`
		// Minimum execution time: 11_789_000 picoseconds.
		Weight::from_parts(15_564_000, 0)
			.saturating_add(Weight::from_parts(0, 3003887))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `GameModule::TestProperties` (r:1 w:1)
	/// Proof: `GameModule::TestProperties` (`max_values`: Some(1), `max_size`: Some(3002402), added: 3002897, mode: `MaxEncodedLen`)
	/// Storage: `GameModule::TestPrices` (r:1 w:1)
	/// Proof: `GameModule::TestPrices` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn remove_property() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1740`
		//  Estimated: `3003887`
		// Minimum execution time: 18_385_000 picoseconds.
		Weight::from_parts(20_622_000, 0)
			.saturating_add(Weight::from_parts(0, 3003887))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `GameModule::Admins` (r:1 w:1)
	/// Proof: `GameModule::Admins` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	fn add_to_admins() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `132`
		//  Estimated: `1806`
		// Minimum execution time: 10_448_000 picoseconds.
		Weight::from_parts(12_934_000, 0)
			.saturating_add(Weight::from_parts(0, 1806))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `GameModule::Admins` (r:1 w:1)
	/// Proof: `GameModule::Admins` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	fn remove_from_admins() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `187`
		//  Estimated: `1806`
		// Minimum execution time: 11_069_000 picoseconds.
		Weight::from_parts(14_432_000, 0)
			.saturating_add(Weight::from_parts(0, 1806))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `GameModule::Users` (r:1 w:1)
	/// Proof: `GameModule::Users` (`max_values`: None, `max_size`: Some(101), added: 2576, mode: `MaxEncodedLen`)
	fn request_token() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `290`
		//  Estimated: `3566`
		// Minimum execution time: 41_262_000 picoseconds.
		Weight::from_parts(53_983_000, 0)
			.saturating_add(Weight::from_parts(0, 3566))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
